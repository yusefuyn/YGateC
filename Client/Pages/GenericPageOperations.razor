@using YGate.Client.Shared.Components
@using YGate.Entities.BasedModel
@using YGate.Entities.ViewModels

@code {
    public RenderFragment GetCategoryTemplateViewModel(CategoryTemplateViewModel categoryTemplateViewModel)
    {
        switch (categoryTemplateViewModel.ValueType)
        {
            case YGate.Entities.BasedModel.PropertyValueType.String:
                return CreateValueTypeStringObject(categoryTemplateViewModel);
            case YGate.Entities.BasedModel.PropertyValueType.Integer:
                return CreateValueTypeIntegerObject(categoryTemplateViewModel);
            case YGate.Entities.BasedModel.PropertyValueType.Boolean:
                return CreateValueTypeBooleanObject(categoryTemplateViewModel);
            case YGate.Entities.BasedModel.PropertyValueType.CustomValidationRegex:
                return CreateValueTypeCustomValidationRegexObject(categoryTemplateViewModel);
            case YGate.Entities.BasedModel.PropertyValueType.ItemGroup:
                return CreateValueTypeItemGroupObject(categoryTemplateViewModel);
            case PropertyValueType.Unit:
                return CreateValueTypeUnitObject(categoryTemplateViewModel);
            case PropertyValueType.Combos:
                return CreateValueTypeCombosObject(categoryTemplateViewModel);
            case PropertyValueType.RichText:
                return CreateValueTypeRichTextObject(categoryTemplateViewModel);
            case PropertyValueType.ValueList:
                return CreateValueTypeValueListObject(categoryTemplateViewModel);
            default:
                throw new Exception("Böyle bir tip yok yada tanımlanmamış.");
        }

    }

    public RenderFragment CreateValueTypeStringObject(CategoryTemplateViewModel categoryTemplateViewModel) =>@<Entry Placeholder="@categoryTemplateViewModel.Name" entryType="Entry.EntryType.Text" @bind-value="categoryTemplateViewModel.categoryTemplateValues[0].Value"></Entry>;

    public RenderFragment CreateValueTypeIntegerObject(CategoryTemplateViewModel categoryTemplateViewModel) =>@<div class="special-div"> <Entry Placeholder="@categoryTemplateViewModel.Name" entryType="Entry.EntryType.Number" @bind-value="categoryTemplateViewModel.categoryTemplateValues[0].Value"></Entry></div>;

    public RenderFragment CreateValueTypeBooleanObject(CategoryTemplateViewModel categoryTemplateViewModel)
    {
        return@<div class="special-div">
        <label>
            <input type="radio" name="cevap" @onchange="()=>{ categoryTemplateViewModel.categoryTemplateValues[0].Value=true.ToString(); }" value="evet"> Evet
        </label>
        <br>
        <label>
            <input type="radio" name="cevap" @onchange="()=>{ categoryTemplateViewModel.categoryTemplateValues[0].Value=false.ToString(); }" value="hayir"> Hayır
        </label>
    </div>
    ;
    }

    public RenderFragment CreateValueTypeCustomValidationRegexObject(CategoryTemplateViewModel categoryTemplateViewModel) =>@<Entry Placeholder="@categoryTemplateViewModel.Name" @bind-value="categoryTemplateViewModel.categoryTemplateValues[0].Value"></Entry>;

    public RenderFragment CreateValueTypeItemGroupObject(CategoryTemplateViewModel categoryTemplateViewModel)
    {
        List<PropertyGroupValue> list = YGate.Json.Operations.JsonDeserialize<List<PropertyGroupValue>>.Deserialize(categoryTemplateViewModel.Values.ToString());
        return@<div class="special-div">
        <label>@categoryTemplateViewModel.Name</label>
        <ComboBox Source="list"
                  DataBinding="xd=> xd.DBGuid"
                  ValueBinding="xd=> xd.Value"
                  Empty="false"
                  SelectedValueChanged="(e)=>ChangeValueGroup(e,categoryTemplateViewModel)"
                  Ttemp="PropertyGroupValue"></ComboBox>
    </div>
    ;
    }

    public RenderFragment CreateValueTypeUnitObject(CategoryTemplateViewModel categoryTemplateViewModel)
    {

        List<MeasurementUnit> listUnit = YGate.Json.Operations.JsonDeserialize<List<MeasurementUnit>>.Deserialize(categoryTemplateViewModel.Values.ToString());
        return@<div class="special-div">
        <label>@categoryTemplateViewModel.Name</label>
        <div class="row">
            <div class="col-md-6">
                <Entry Placeholder="" entryType="Entry.EntryType.Number" valueChanged='(e)=> ChangeUnitValueValue(categoryTemplateViewModel,e.ToString())'></Entry>
            </div>
            <div class="col-md-6">
                <ComboBox Source="listUnit"
                          DataBinding="xd=> xd.DBGuid"
                          Empty="false"
                          SelectedValueChanged='(e)=> ChangeUnitUnitValue(categoryTemplateViewModel,e.Value.ToString())'
                          ValueBinding="xd=> GetFormattedValue(xd)"
                          Ttemp="MeasurementUnit"></ComboBox>
            </div>
        </div>
    </div>
    ;
    }

    public RenderFragment CreateValueTypeCombosObject(CategoryTemplateViewModel categoryTemplateViewModel)
    {
        //             List<PropertyGroupValue> listCombos = YGate.Json.Operations.JsonDeserialize<List<PropertyGroupValue>>.Deserialize(categoryTemplateViewModel.Values.ToString());
        //             return@<div>
        //     <label>@categoryTemplateViewModel.Name</label>
        //     @foreach (var combo in listCombos)
        // {
        //     <div class="special-div">

        //         <CheckBox Text="@combo.Value"
        //                   CheckedChange="(e)=> ChangeCombosValue(e,categoryTemplateViewModel,combo)"></CheckBox>
        //     </div>

        // }
        // </div>
        // ;

        return@<p>Combos'ta bir sorun var onu oturtamadık tekrar dön bak .</p>;
    }

    public RenderFragment CreateValueTypeRichTextObject(CategoryTemplateViewModel categoryTemplateViewModel) =>@<div class="special-div"><RichTextEditor Source="@categoryTemplateViewModel.categoryTemplateValues[0].Value"></RichTextEditor></div>;

    public RenderFragment CreateValueTypeValueListObject(CategoryTemplateViewModel categoryTemplateViewModel)
    {
        return@<div class="special-div" style="position: relative;">
        <br />
        @foreach (var vals in categoryTemplateViewModel.categoryTemplateValues)
    {
        <div class="row">
            <div class="col-11">
                <Entry Placeholder="@categoryTemplateViewModel.Name"
                       @bind-value="vals.Value" />
            </div>
            <div class="col-1">
                <SpecialButton Text="X"
                               Style="height:45px;"
                               OnClick="() => {categoryTemplateViewModel.RemoveValue(vals); StateHasChanged();}" />
            </div>
        </div>
    }
        <SpecialButton Text="+" Style="width:100%;height:45px;" OnClick="()=>{ categoryTemplateViewModel.NewValueAdd(); StateHasChanged(); }"></SpecialButton>
    </div>
    ;
    }

    List<RichTextEditor> Editors { get; set; }
    RichTextEditor richRef
    {
        set { Editors.Add(value); }
    }

    public void ChangeUnitUnitValue(CategoryTemplateViewModel model, string SelectedUnitGuid)
    {
        string OldInteger = "";
        string OldUnit = SelectedUnitGuid;
        dynamic oldValue = YGate.Json.Operations.JsonDeserialize<dynamic>.Deserialize(model.categoryTemplateValues[0].Value);

        try
        {
            OldInteger = oldValue["IntegerVal"];
        }
        catch (Exception ex)
        {

        }
        model.categoryTemplateValues[0].Value = YGate.Json.Operations.JsonSerialize.Serialize(new { IntegerVal = OldInteger, UnitGuid = OldUnit });
    }


    public void ChangeUnitValueValue(CategoryTemplateViewModel model, string Value)
    {
        string OldInteger = Value;
        string OldUnit = "";
        dynamic oldValue = YGate.Json.Operations.JsonDeserialize<dynamic>.Deserialize(model.categoryTemplateValues[0].Value);
        try
        {
            OldUnit = oldValue["UnitGuid"];
        }
        catch (Exception ex)
        {

        }
        model.categoryTemplateValues[0].Value = YGate.Json.Operations.JsonSerialize.Serialize(new { IntegerVal = OldInteger, UnitGuid = OldUnit });
    }


    private void ChangeValueGroup(ChangeEventArgs eventArgs, CategoryTemplateViewModel model)
    {
        if (model.categoryTemplateValues == null)
            return;

        List<PropertyGroupValue> list = YGate.Json.Operations.JsonDeserialize<List<PropertyGroupValue>>.Deserialize(model.Values.ToString());

        model.categoryTemplateValues[0].Value = list.FirstOrDefault(xd => xd.DBGuid == eventArgs.Value.ToString()).Value.ToString();
        model.categoryTemplateValues[0].ValueGroupGuid = eventArgs.Value.ToString();
    }


    private string GetFormattedValue(MeasurementUnit xd)
    {
        return $"{xd.Name} ({xd.Symbol})";
    }

    public void ChangeCombosValue(ChangeEventArgs eventArgs, CategoryTemplateViewModel model, PropertyGroupValue val)
    {
        var addedGuid = val.DBGuid;
        bool eventval = (bool)eventArgs.Value;

        if (eventval)
        {
            CategoryTemplateValue categoryTemplateValue = new()
                {
                    OwnerGuid = model.OwnerGuid,
                    Value = addedGuid,
                    CategoryTemplateGuid = model.DBGuid,
                    ValueGroupGuid = val.PropertyGroupGuid
                };
            model.categoryTemplateValues.Add(categoryTemplateValue);
        }
        else
        {
            var obj = model.categoryTemplateValues.FirstOrDefault(xd => xd.Value == addedGuid);

            if (obj == null)
                return;

            model.categoryTemplateValues.Remove(obj);
        }
    }
}
