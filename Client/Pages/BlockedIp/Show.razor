@attribute [Authorize(Roles = "Administrator")]
@page "/Management/BlockedIp"
@using Microsoft.AspNetCore.Authorization
@using YGate.Entities
@inject IAdministratorService administratorService
@using YGate.Client.Shared.Components;
<div class="container">
    <div class="container-header">
        <h3>Show Blocked Ip List</h3>
    </div>

    <Entry Placeholder="Blocked Ip Address"
                                          entryType="Shared.Components.Entry.EntryType.Text"
                                          @bind-Value="BlockIpValue"></Entry>
    <SpecialButton Text="Block" OnClick="async()=> await BlockIp()"></SpecialButton>

    @if (source != null)
    {

        <table class="table table-dark table-striped-columns">
            <thead>
                <tr>
                    <th scope="col">Ip</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var temp in source)
                {
                    <tr class="table-row">
                        <td>@temp.ToString()</td>
                        <td>
                            <YGate.Client.Shared.Components.SpecialButton Text="Remove" OnClick="async ()=> await RemoveIp(temp.ToString())"></YGate.Client.Shared.Components.SpecialButton>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    }
    else
    {

        <p>@localizer["NoDataCurrentlyAvailable."]</p>


    }
</div>

@code {
    public List<string> source = new();
    public string BlockIpValue = "";

    protected override async Task OnInitializedAsync()
    {
        await DataRefresh();
    }

    public async Task DataRefresh()
    {
        RequestResult res = await administratorService.GetBlockedIpList();
        if (res.Result == EnumRequestResult.Success)
            source = res.ConvertRequestObject<List<string>>();
    }

    public async Task RemoveIp(string ip)
    {
        RequestResult res = await administratorService.RemoveBlockedListToIp(ip);
        if (res.Result == EnumRequestResult.Success)
            source = res.ConvertRequestObject<List<string>>();
    }

    public async Task BlockIp()
    {
        RequestResult res = await administratorService.AddBlockedIpList(BlockIpValue);
        if (res.Result == EnumRequestResult.Success)
        {
            source = res.ConvertRequestObject<List<string>>();
            BlockIpValue = "";

        }
    }
}

