@page "/Login"
@using Microsoft.AspNetCore.Components.Authorization
@using YGate.Client.Services
@using YGate.Client.Services.Login
@using YGate.Client.Services.Profile
@using YGate.Client.Shared.Components
@using YGate.Entities
@using YGate.Entities.BasedModel
@using YGate.Entities.ViewModels
@using YGate.Interfaces.DomainLayer
@using YGate.Json.Operations
@inject IJSRuntime jsRuntime

<PageTitle>@localizer["Login"]</PageTitle>

<style>
    .input-container {
        display: flex;
        flex-direction: column;
        gap: 7px;
        position: relative;
        color: var(--font-color);
    }

</style>

<div class="login-container">
    <h1>@localizer["Login"]</h1>
    <br />
    <div class="bd-transparent">
        <div class="form">
            <Entry @bind-Value="Model.UserName" Placeholder="@localizer["Username"]" entryType="Entry.EntryType.Text"></Entry>
            <br />
            <Entry @bind-Value="Model.Password" Placeholder="@localizer["Password"]" entryType="Entry.EntryType.Password"></Entry>
            <label style="color:red;">@localizer[ErrorMessage]</label>
            <br>
            <label>@localizer["Do_you_not_have_an_account"]<a href="/Register">@localizer["Click_register"]</a></label>
            <SpecialButton Style="height:50px;width:100%;" OnClick="async ()=>await login()" Id="LoginButton" Class="btn-primary" Text="@localizer["Login"]"></SpecialButton>

        </div>
    </div>
</div>
@code {
    public LoginViewModel Model { get; set; } = new();
    public string ErrorMessage { get; set; } = "";

    public async Task login()
    {
        await jsRuntime.InvokeVoidAsync("disableButton", "LoginButton");
        ErrorMessage = "";
        StateHasChanged();


        if (string.IsNullOrEmpty(Model.UserName) || string.IsNullOrEmpty(Model.Password))
        {
            ErrorMessage = "fill in the empty fields";
            await jsRuntime.InvokeVoidAsync("enableButton", "LoginButton");
            return;
        }

        var nmodel = new LoginViewModel();
        nmodel.UserName = Model.UserName;
        nmodel.Password = YGate.String.Operations.Hash.SaltAndSHA512(Model.Password);
        RequestResult opres = await loginregisterService.LoginAsync(nmodel);


        if (opres.Result != EnumRequestResult.Success)
        {
            ErrorMessage = opres.ShortDescription.ToString();
            await jsRuntime.InvokeVoidAsync("enableButton", "LoginButton");
            StateHasChanged();
            return;
        }

        LoginReplyViewModel account = opres.ConvertRequestObject<LoginReplyViewModel>();
        await cookieService.SetCookie("Token", account.Token, 90);

        await AuthStateProvider.GetAuthenticationStateAsync();
        await profileService.GetMyProfile(); // Profil bilgilerinin alınması için
        navigationManager.NavigateTo("/");

    }
}
