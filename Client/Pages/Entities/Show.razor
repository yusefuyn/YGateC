@page "/Show/Entitie/{Guid}"
@using YGate.Client.Services.Category
@using YGate.Client.Services.Entitie
@inject IEntitieService entitieService
@inject IEntitieViewService entitieViewService
@inject ICategoryService categoryService
@inject IJSRuntime jsRuntime
<style>
    @CssStyle
</style>
<div class="container">

    @if (entitieviewModel != null)
    {
        @view
        <br />
        @if (entitieviewModel.Transfers != null && entitieviewModel.Transfers.Count() > 0)
        {

            <div class="container special-div">
                <div class="container-header">
                    <h3>Object Transfer History</h3>
                </div>
                @foreach (var trans in entitieviewModel.Transfers)
                {
                    <p>@trans.OldOwnerGuid.ToString() -> @trans.NewOwnerGuid - @trans.DateTimeUTC.ToString()</p>
                }
            </div>
            <br />

        }
        <div class="container special-div">
            <br />
            <YGate.Client.Pages.Comment.Add Key="@entitieviewModel.DBGuid.ToString()"></YGate.Client.Pages.Comment.Add>
            <br />
            <YGate.Client.Pages.Comment.Show Key="@entitieviewModel.DBGuid.ToString()"></YGate.Client.Pages.Comment.Show>
            <br />
        </div>
    }
</div>

@code {
    [Parameter]
    public string Guid { get; set; }

    private YGate.Entities.ViewModels.EntitieViewModel entitieviewModel { get; set; } = null;

    private string CssStyle { get; set; } = "";

    private MarkupString view { get; set; } = new("<p>Bu varlık görüntülenemez!<span style='color:red;'>Yada şu anda görüntü oluşturuluyor olabilir.!Bilemeyiz.</span></p>");
    protected override async Task OnInitializedAsync()
    {
        var res1 = await entitieService.GetEntitieViewModel(Guid);
        if (res1.Result == YGate.Entities.EnumRequestResult.Success)
            entitieviewModel = res1.ConvertRequestObject<YGate.Entities.ViewModels.EntitieViewModel>();

        view = entitieViewService.GetDataView(entitieviewModel);

        StateHasChanged();
        await jsRuntime.InvokeVoidAsync("ycustomlistComponentLoad");
    }
}
