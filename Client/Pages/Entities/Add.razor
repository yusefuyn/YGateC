@page "/Management/Entitie/Add/{SelectedCategoryGuid}"
@using YGate.Client.Services.Category
@using YGate.Client.Services.Entitie
@using YGate.Client.Services.Property
@using YGate.Entities
@using YGate.Entities.BasedModel
@using YGate.Entities.ViewModels
@using YGate.Client.Shared.Components

@inject ICategoryService categoryService
@inject IPropertyService propertyService
@inject IJSRuntime jsRuntime
@inject IProfileService profileService
@inject IEntitieService entitieService
@inject NavigationManager navigationManager
<div class="container">
    @if (categoryViewModel != null)
    {

        <h3>@categoryViewModel.Name.ToString() kategorisine varlık ekliyorsunuz.</h3>
        <h4>Lütfen aşağıda istenen bilgileri eksiksiz doldurmaya özen gösterin.</h4>
        <h5>Yanlış eklemeniz durumunda listelenmeyebilir,listelenmesi azalabilir veya anlaşmazlığa varabilirsiniz.</h5>
        <br />
        <div class="container special-div">
            <header class="container-header">
                <h3>@categoryViewModel.Name</h3>
            </header>
            <br />

            @foreach (CategoryTemplateViewModel temp in categoryViewModel.Template)
            {
                @operations.GetCategoryTemplateViewModel(temp)
            }


        </div>
        <br />
    }
    else
    {
        <p>Veri modeli gelmedi.</p>
    }

    @if (AddedSubCategoryViewModel != null && AddedSubCategoryViewModel.Count > 0)
    {
        @foreach (var subCategoryViewModels in AddedSubCategoryViewModel)
        {
            <div class="container special-div">
                <div class="container-header">
                    <h3>@subCategoryViewModels.Name</h3>
                    <SpecialButton Text="Objeyi Sil"
                                   Style="width:100px;"
                                   OnClick="async ()=> await SubCategoryRemove(subCategoryViewModels)"></SpecialButton>
                </div>



                @foreach (CategoryTemplateViewModel temp in subCategoryViewModels.Template)
                {
                    @operations.GetCategoryTemplateViewModel(temp)
                    <br />
                }
            </div>
            <br />
        }
    }


    <div class="special-div container">
        <div class="container-header">
            <h3>Alt öğe ekle</h3>
        </div>
        <ComboBox Source="subCategoryList"
                  Ttemp="Category"
                  ValueBinding="xd=> xd.Name"
                  Empty="false "
                  DataBinding="xd=> xd.DBGuid"
                  SelectedValueChanged="(e)=> SelectedSubCategoryGuid = e.Value.ToString()"></ComboBox>
        <SpecialButton Text="+" OnClick="async ()=> await AddSubCategory(SelectedSubCategoryGuid)"></SpecialButton>
        <br />
    </div>
    <br />
    <SpecialButton Text="Kaydet" Style="height:50px;" OnClick="async()=>SharedClick()"></SpecialButton>
    <br />
</div>

@code {
    // Altın altı mantığıyla eklenmiş birinci derece alt ve ikinci derece alt öğelerde
    // birinci derece alt öğenin kaldırılmasıyla ikinci derece alt öğenin kalması sorunu var.
    // Bu şimdilik benim için bir sorun teşkil etmiyor ve iyide oluyor.
    // İlan->Bilgisayar->Anakart şeklinde eklenecek ilan
    // Birinci derece alt öğe olan bilgisayarın kaldırılmasıyla.
    // İlan->Anakart oluyor.
    // Eğer ikinci derece alt öğeyide ana öğeye bağlıyorsak bu işimize gelen bir kullanım doğurur.
    // Ama dikkat etmeliyiz.



    private GenericPageOperations operations = new();

    [Parameter]
    public string SelectedCategoryGuid { get; set; } // Ana kategoride seçilen
    public string SelectedSubCategoryGuid { get; set; } // Alt kategorilerde seçilen

    public CategoryViewModel categoryViewModel { get; set; } // Ana kategori
    public List<CategoryViewModel> AddedSubCategoryViewModel { get; set; } // Eklenmek istenen alt kategoriler
    public List<Category> subCategoryList { get; set; } // Alt kategori listesi
    public EntitieViewModel mainEntitie { get; set; }
    public List<EntitieViewModel> SubEntitie { get; set; }

    public async Task SubCategoryRemove(CategoryViewModel removedCategory)
    {
        AddedSubCategoryViewModel.Remove(removedCategory);
        await jsRuntime.InvokeVoidAsync("showNotification", $"{removedCategory.Name} alt öğesi {categoryViewModel.Name} öğesinin alt öğeliğinden kaldırıldı.");
        StateHasChanged();
    }

    public async Task GetAllSubCategory(string dbguid)
    {
        var res = await categoryService.GetAllSubCategoryToParentCategoryGuid(dbguid);
        if (res.Result == EnumRequestResult.Success)
        {
            var obj = res.ConvertRequestObject<List<Category>>();
            if (obj != null && obj.Count > 0)
                subCategoryList = obj;
        }
    }

    public async Task AddSubCategory(string Guid)
    {
        var res = await categoryService.GetCategory(Guid);
        if (res.Result == EnumRequestResult.Success)
        {
            var obj = res.ConvertRequestObject<CategoryViewModel>();
            AddedSubCategoryViewModel.Add(obj);
            await GetAllSubCategory(obj.DBGuid);
            StateHasChanged();
            await jsRuntime.InvokeVoidAsync("showNotification", $"{obj.Name} alt öğesi {categoryViewModel.Name} öğesi altına eklendi");

        }
        else
            await jsRuntime.InvokeVoidAsync("showNotification", $"Obje gelmedi :,((");

    }

    private async void SharedClick()
    {
        string OwnerGuid = await profileService.GetPropertiesValue("Guid");

        foreach (var temp in categoryViewModel.Template.Where(xd => xd.Require == true))
        {
            if (temp.CheckData())
                continue;
            await jsRuntime.InvokeVoidAsync("showNotification", $"{temp.Name} zorunlu belirtilmesi gereken bir özelliktir.!\nLütfen doldurunuz.");
            return;
        }

        await jsRuntime.InvokeVoidAsync("showNotification", $"Varlığınız şablona uygun gözüküyor.");
        mainEntitie.SharedDateUTC = DateTime.UtcNow;




        if (categoryViewModel.Template == null || !categoryViewModel.Template.Any())
        {
            Console.WriteLine("Template listesi boş.");
            return;
        }


        foreach (var template in categoryViewModel.Template)
        {
            if (template.categoryTemplateValues == null || !template.categoryTemplateValues.Any())
            {
                Console.WriteLine($"Template {template.Name} için categoryTemplateValues boş.");
                continue;
            }

            foreach (var templateValue in template.categoryTemplateValues)
            {
                string prdbgd = "";
                if (!string.IsNullOrEmpty(templateValue.ValueGroupGuid)) prdbgd = templateValue.ValueGroupGuid.ToString();
                EntitiePropertyValue entitiePropertyValue = new();
                entitiePropertyValue.CategoryTemplateGuid = template.DBGuid;
                entitiePropertyValue.PropertyName = template.Name;
                entitiePropertyValue.PropertyValue = templateValue.Value.ToString();
                entitiePropertyValue.PropertyDBGuid = prdbgd;
                entitiePropertyValue.EntitieDbGuid = mainEntitie.DBGuid.ToString();
                entitiePropertyValue.OwnerGuid = OwnerGuid;
                mainEntitie.Values.Add(entitiePropertyValue);
            }
        }


        foreach (CategoryViewModel subCatViewModel in AddedSubCategoryViewModel)
        {
            if (subCatViewModel == null)
            {
                Console.WriteLine($"Alt kategori verisi boş {subCatViewModel.Name}");
                continue;
            }


            EntitieViewModel entityViewModel = new()
                {
                    CategoryName = subCatViewModel.Name,
                    CategoryDBGuid = subCatViewModel.DBGuid,
                    OwnerGuid = OwnerGuid,
                    SharedDateUTC = DateTime.UtcNow,
                    ParentEntitieDBGuid = mainEntitie.DBGuid,
                    IsActive = true,
                    Values = new List<EntitiePropertyValue>(),
                };

            foreach (var temp in subCatViewModel.Template)
            {
                foreach (var cattempval in temp.categoryTemplateValues)
                {
                    string prdbgd = "";
                    if (!string.IsNullOrEmpty(cattempval.ValueGroupGuid)) prdbgd = cattempval.ValueGroupGuid.ToString();
                    EntitiePropertyValue entitiePropertyValue = new();
                    entitiePropertyValue.CategoryTemplateGuid = temp.DBGuid;
                    entitiePropertyValue.PropertyName = temp.Name;
                    entitiePropertyValue.PropertyValue = cattempval.Value.ToString();
                    entitiePropertyValue.PropertyDBGuid = prdbgd;
                    entitiePropertyValue.EntitieDbGuid = entityViewModel.DBGuid.ToString();
                    entitiePropertyValue.OwnerGuid = OwnerGuid;
                    entityViewModel.Values.Add(entitiePropertyValue);
                }
            }

            SubEntitie.Add(entityViewModel);


        }


        var res = await entitieService.AddEntitie(mainEntitie, SubEntitie);
        if (res.Result == YGate.Entities.EnumRequestResult.Success)
        {
            await jsRuntime.InvokeVoidAsync("showNotification", $"Varlığınız eklenmiştir.");
            navigationManager.NavigateTo("/Entity");
        }
        else
            await jsRuntime.InvokeVoidAsync("showNotification", $"Varlığınız EKLENEMEMİŞTİR. \n {res.ShortDescription}");
    }

    private async Task RefreshData()
    {
        AddedSubCategoryViewModel = new();
        var res = await categoryService.GetCategory(SelectedCategoryGuid);
        if (res.Result == EnumRequestResult.Success)
            categoryViewModel = res.ConvertRequestObject<CategoryViewModel>();
        mainEntitie = new();
        mainEntitie.OwnerGuid = await profileService.GetPropertiesValue("Guid");
        mainEntitie.CategoryDBGuid = SelectedCategoryGuid;

        SubEntitie = new();

        await GetAllSubCategory(SelectedCategoryGuid);
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }
}
