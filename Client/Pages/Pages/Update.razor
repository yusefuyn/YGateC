@page "/Management/Pages/Update/{pageguid}"
@using YGate.Client.Services.Page
@using YGate.Entities.BasedModel
@using YGate.Client.Shared.Components
@using YGate.Interfaces.DomainLayer
@inject IPageService pageService
@inject IJSRuntime jSRuntime
<h3>Update</h3>
<div class="container">
    <div class="container-header">
        <h3>Add</h3>
    </div>
    <Entry Placeholder="Name" @bind-Value="page.Name"></Entry>
    <div id="editor" style="height: 400px; width: 100%; border:1px solid #333333;"></div>
    <SpecialButton Text="Ok" OnClick="async()=> await UpdatePage()"></SpecialButton>
</div>


@code {
    [Parameter] public string pageguid { get; set; }
    DynamicPage page { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var res = await pageService.GetPageForGuid(pageguid);
        page = res.ConvertRequestObject<DynamicPage>();
        StateHasChanged();
    }

    public async Task UpdatePage()
    {
        page.Index = await GetEditorContent();
        var res = await pageService.PageObjectUpdate(page);
        if (res.Result == EnumRequestResult.Success)
            navigationManager.NavigateTo("/Management/Pages");

        await jSRuntime.InvokeVoidAsync("showNotification", res.LongDescription.ToString());
    }

    private bool Rendered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && Rendered == false)
        {
            await jSRuntime.InvokeVoidAsync("AceEditorInitialize", "editor");
            await SetEditorContent(page.Index);
            Rendered = true;
        }
    }

    private async Task<string> GetEditorContent()
    {
        var EditorText = "";
        EditorText = await jSRuntime.InvokeAsync<string>("AceEditorGetValue");
        return EditorText;
    }

    private async Task SetEditorContent(string code)
    {
        await jSRuntime.InvokeVoidAsync("AceEditorSetValue", code);
        await jSRuntime.InvokeVoidAsync("AceEditorFormatCode");
    }
}