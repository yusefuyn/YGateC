@page "/Management/Pages/Add"
@using YGate.Client.Services.Page
@using YGate.Entities.BasedModel
@using YGate.Interfaces.DomainLayer
@inject IPageService pageService
@inject IJSRuntime jSRuntime
@inject NavigationManager navigationManager
<div class="container">
    <div class="container-header">
        <h3>Add</h3>
    </div>
    <YGate.Client.Shared.Components.Entry Placeholder="Name" @bind-Value="page.Name"></YGate.Client.Shared.Components.Entry>

    <div id="editor" style="height: 400px; width: 100%; border:1px solid #333333;"></div>

    <YGate.Client.Shared.Components.SpecialButton Text="Ok" OnClick="async()=> await AddPage()"></YGate.Client.Shared.Components.SpecialButton>
</div>

@code {
    DynamicPage page { get; set; } = new();

    public async Task AddPage()
    {
        page.Index = await GetEditorContent();
        var res = await pageService.Add(page);
        if (res.Result == EnumRequestResult.Success)
            navigationManager.NavigateTo("/Management/Pages");
        await jSRuntime.InvokeVoidAsync("showNotification", res.LongDescription.ToString());

    }

    private bool Rendered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && Rendered == false)
        {
            await jSRuntime.InvokeVoidAsync("AceEditorInitialize", "editor");
            await SetEditorContent(page.Index);
            Rendered = true;
        }
    }

    private async Task<string> GetEditorContent()
    {
        var EditorText = "";
        EditorText = await jSRuntime.InvokeAsync<string>("AceEditorGetValue");
        return EditorText;
    }

    private async Task SetEditorContent(string code)
    {
        await jSRuntime.InvokeVoidAsync("AceEditorSetValue", code);
        await jSRuntime.InvokeVoidAsync("AceEditorFormatCode");
    }
}
