@page "/Register"
@using YGate.Client.Services.Login
@using YGate.Client.Shared.Components
@using YGate.Entities.ViewModels
@using YGate.Interfaces.DomainLayer
@inject IJSRuntime jsRuntime
<PageTitle>@localizer["Register"]</PageTitle>

<style>
    .input-container {
        display: flex;
        flex-direction: column;
        gap: 7px;
        position: relative;
        color: white;
    }

        .input-container .label {
            font-size: 15px;
            padding-left: 10px;
            position: absolute;
            top: 13px;
            transition: 0.3s;
            pointer-events: none;
        }

    .input {
        height: 45px;
        border: none;
        outline: none;
        padding: 0px 7px;
        border-radius: 6px;
        color: #fff;
        font-size: 15px;
        background-color: transparent;
        box-shadow: 3px 3px 10px rgba(0,0,0,1), -1px -1px 6px rgba(255, 255, 255, 0.4);
    }

        .input:focus {
            border: 2px solid transparent;
            color: #fff;
            box-shadow: 3px 3px 10px rgba(0,0,0,1), -1px -1px 6px rgba(255, 255, 255, 0.4), inset 3px 3px 10px rgba(0,0,0,1), inset -1px -1px 6px rgba(255, 255, 255, 0.4);
        }

    .input-container .input:valid ~ .label,
    .input-container .input:focus ~ .label {
        transition: 0.3s;
        padding-left: 2px;
        transform: translateY(-35px);
    }

    .input-container .input:valid,
    .input-container .input:focus {
        box-shadow: 3px 3px 10px rgba(0,0,0,1), -1px -1px 6px rgba(255, 255, 255, 0.4), inset 3px 3px 10px rgba(0,0,0,1), inset -1px -1px 6px rgba(255, 255, 255, 0.4);
    }
</style>
<div class="login-container">
    <h1>@localizer["Register"]</h1>
    <div class="bd-transparent">
        <div class="form">
            <div class="mb-3 input-container">
                <Entry @bind-Value="UserName" entryType="Entry.EntryType.Text" Placeholder="@localizer["Username"]"></Entry>
            </div>
            <div class="mb-3 input-container">
                <Entry @bind-Value="Password" entryType="Entry.EntryType.Password" Placeholder="@localizer["Password"]"></Entry>
            </div>
            <div class="mb-3 input-container">
                <Entry @bind-Value="RPassword" entryType="Entry.EntryType.Password" Placeholder="@localizer["Password_Retry"]"></Entry>
            </div>
            <div class="mb-3 input-container">
                <Entry @bind-Value="model.Email" entryType="Entry.EntryType.Text" Placeholder="@localizer["Email"]"></Entry>
            </div>
            <label style="color:red;">@localizer[ErrorMessage]</label>
            <br>
            <label>@localizer["Do_you_have_an_account"]<a href="/Login">@localizer["Click_log_in"]</a></label>
            <SpecialButton OnClick="register" Id="RegisterButton" Class="" Text="@localizer["Register"]"></SpecialButton>

        </div>
    </div>
</div>
@code {
    RegisterViewModel model { get; set; }


    private string UserName { get; set; }
    private string Password { get; set; }
    private string RPassword { get; set; }
    string ErrorMessage = "";

    protected override void OnInitialized()
    {
        model = new();
        UserName = "";
        Password = "";
        RPassword = "";
    }

    public async void register()
    {
        await jsRuntime.InvokeVoidAsync("disableButton", "RegisterButton");
        ErrorMessage = "";
        StateHasChanged();

        if (RPassword != Password)
        {
            ErrorMessage = "Şifre tekrarı uyuşmyuor";
            return;
        }

        model.UserName = UserName;
        model.Password = YGate.String.Operations.Hash.SaltAndSHA512(Password);
        model.RPassword = YGate.String.Operations.Hash.SaltAndSHA512(RPassword);

        var res = await loginregisterService.RegisterAsync(model);
        if (res.Result != EnumRequestResult.Success)
        {
            ErrorMessage = res.ShortDescription.ToString();
            await jsRuntime.InvokeVoidAsync("enableButton", "RegisterButton");
            StateHasChanged();
            return;
        }
        StartCountdown();
    }


    int countdown = 3;

    System.Timers.Timer timer;

    private void StartCountdown()
    {
        timer = new(1000);
        timer.Enabled = true;
        timer.Elapsed += OnTimerElapsed;
    }

    private void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (countdown > 0)
        {
            countdown--;
            ErrorMessage = $"{countdown} saniye içerisinde login sayfasına yönlendiriliyorsunuz.";
            InvokeAsync(StateHasChanged);
        }
        else
        {
            navigationManager.NavigateTo("/Login");
            timer?.Stop();
            timer?.Dispose();
        }
    }

    public void Dispose()
    {
        timer?.Stop();
        timer?.Dispose();
    }

}
