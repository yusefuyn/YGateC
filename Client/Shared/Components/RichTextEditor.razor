@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime

<div id="@NoteId">@Content</div>



@code {
    [Parameter] public string Content { get; set; }

    [Parameter] public EventCallback<string> ContentChanged { get; set; }

    private string NoteId { get; } = $"RichTextEditor{new Random().Next(0, 1000000).ToString()}";

    [JSInvokable]
    public Task UpdateContent(string content)
    {
        Content = content;
        ContentChanged.InvokeAsync(Content);
        Console.WriteLine("RichTextEditor updatecontent");
        StateHasChanged(); 
        return Task.CompletedTask;
    }

    private DotNetObjectReference<RichTextEditor> objRef;
    protected override async Task OnInitializedAsync()
    {
        // await jsRuntime.InvokeVoidAsync("initializeSummernote", NoteId);

        objRef = DotNetObjectReference.Create(this);
        await jsRuntime.InvokeVoidAsync("initializeSummernote", NoteId, objRef);


    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}